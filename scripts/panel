#!/bin/sh
# panel
# Start a panel on every monitor
# This script makes some assumptions if using multihead setup:
# The leftmost monitor is the tallest(reaches the highest in xroot window) - lemonbars -g flag acts differently if this is not the case
# Monitors names are arranged left to right, named in increasing int value(1 2 3..)

source ~/.config/global.conf

# Kill the panel if it is currently running
if [ $(pgrep -cx lemonbar) -gt 1 ] ; then
	printf "%s\n" "The panel is already running."
    while [[ $(pgrep -c "lemonbar") != 0 ]]
    do
        pkill -n -9 "lemonbar"
    done
fi
trap 'trap - TERM; kill 0' INT TERM QUIT EXIT

# Track the current offset for making a bar per monitor, so we can make bars with specific geometries.
CUR_X_OFFSET=0

# Get the number of monitors we will be making bars for
num_mon=$(bspc query -M)

# panel_gap to 0 if no gaps.
PANEL_GAP=0

for i in $num_mon; do
    # remove any open panel fifo, and then create one
    [ -e "$PANEL_FIFO$i" ] && rm "$PANEL_FIFO$i"
    mkfifo "$PANEL_FIFO$i"

    # This greps out the bspc control section of the current monitor we are on.
    # The while loop in the middle appends 'W' to the start because the panel_bar
    # script assumes input from a 'regular' bspc control --subscribe command
    bspc control --subscribe |\
        grep -oE "[Mm]$i[^TM]*[TML]" --line-buffered |\
        while read line; do echo W$line; done \
            > "$PANEL_FIFO$i" &

    # outputs system information.
    if [ -z "$(eval echo \$'barInfo'$i)" ]; then
        bar_info $barInfo > "$PANEL_FIFO$i" &
    else
        #Custom bar options per monitor. (defined barInfo$i var for this monitor)
        bar_info $(eval echo \$'barInfo'$i) > "$PANEL_FIFO$i" &
    fi

    # Grep for current monitor width (will be first number regex match from bspc query command below).
    CUR_MON_WIDTH=$(bspc query -T -m $i | grep -oE "[0-9]{2,6}" | head -n 1)

    # The nested expr statements account for gap settings and current offset.
    # PANEL_GAP value is set in profile.
    cat "$PANEL_FIFO$i" | panel_bar | lemonbar -g $(expr $CUR_MON_WIDTH - $(expr $PANEL_GAP + $PANEL_GAP))x15+$(expr $CUR_X_OFFSET + $PANEL_GAP)+$PANEL_GAP -f "$FONT1" -f "$FONT2" -F "$BAR_FG" -B "$BAR_BG"| sh &

    # Increment the x offset for the next monitor.
    CUR_X_OFFSET=$(expr $CUR_X_OFFSET + $CUR_MON_WIDTH )
done

wait
